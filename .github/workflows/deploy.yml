name: Deploy Serverless Application

on:
  push:
    branches:
      - github-action-api-gw-lambda-dynamodb
permissions:
  id-token: write  # Required for OIDC authentication
  contents: read   # Provides access to repository contents

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 3: Install AWS SAM CLI
      - name: Install AWS SAM CLI
        run: |
          pip install aws-sam-cli

      # Step 4: Configure AWS Credentials using OIDC
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::582140066777:role/github-action-role
          aws-region: us-east-1

      # Step 5: Build the SAM application
      - name: Build SAM Application
        run: |
          sam build --template-file infrastructure/template.yaml

      # Step 6: Deploy the SAM application
      - name: Deploy SAM Application
        run: |
          STACK_NAME=my-serverless-app
          aws cloudformation describe-stacks --stack-name $STACK_NAME || STACK_EXISTS=$?
          if [ "$STACK_EXISTS" -ne 0 ]; then
            echo "Stack does not exist. Creating new stack: $STACK_NAME"
            sam deploy \
              --stack-name $STACK_NAME \
              --resolve-s3 \
              --template-file .aws-sam/build/template.yaml \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
              --no-confirm-changeset \
              --no-fail-on-empty-changeset
          else
            echo "Stack exists. Updating stack: $STACK_NAME"
            sam deploy \
              --stack-name $STACK_NAME \
              --resolve-s3 \
              --template-file .aws-sam/build/template.yaml \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
              --no-confirm-changeset \
              --no-fail-on-empty-changeset

      - name: Check for rollback status
        id: check_rollback
        run: |
          STACK_NAME=my-serverless-app
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].StackStatus" --output text)
          echo "Stack status: $STACK_STATUS"
          echo "::set-output name=status::$STACK_STATUS"
        continue-on-error: true

      - name: Delete rollbacked stack
        if: steps.check_rollback.outputs.status == 'ROLLBACK_COMPLETE' || steps.check_rollback.outputs.status == 'ROLLBACK_FAILED'
        run: |
          STACK_NAME=my-serverless-app
          echo "Deleting stack in ROLLBACK status: $STACK_NAME"
          aws cloudformation delete-stack --stack-name $STACK_NAME

      # Step 7: Run Integration Tests (Optional)
      - name: Run Integration Tests
        run: |
          # Replace with your actual API endpoint
          API_ENDPOINT=$(sam deploy --query "Outputs.UsersApiURL.Value" --output text --no-cli-pager)
          
          # Test Create User
          CREATE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X POST $API_ENDPOINT/users \
            -H "Content-Type: application/json" \
            -d '{"UserID": "U1001", "Name": "Alice", "Email": "alice@example.com", "Age": 25}')
          if [ "$CREATE_RESPONSE" -ne 201 ]; then
            echo "Create User failed with status code $CREATE_RESPONSE"
            exit 1
          fi
          
          # Test Get User
          GET_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X GET $API_ENDPOINT/users/U1001)
          if [ "$GET_RESPONSE" -ne 200 ]; then
            echo "Get User failed with status code $GET_RESPONSE"
            exit 1
          fi
          
          # Test Update User
          UPDATE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X PUT $API_ENDPOINT/users/U1001 \
            -H "Content-Type: application/json" \
            -d '{"Email": "alice.new@example.com", "Age": 26}')
          if [ "$UPDATE_RESPONSE" -ne 200 ]; then
            echo "Update User failed with status code $UPDATE_RESPONSE"
            exit 1
          fi
          
          # Test Delete User
          DELETE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE $API_ENDPOINT/users/U1001)
          if [ "$DELETE_RESPONSE" -ne 200 ]; then
            echo "Delete User failed with status code $DELETE_RESPONSE"
            exit 1
          fi
          
          echo "All integration tests passed successfully."

      # Step 8: Notify on Success (Optional)
      - name: Notify Success on Slack
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # Step 9: Notify on Failure (Optional)
      - name: Notify Failure on Slack
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
